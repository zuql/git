package com.pentest;

import com.zuql.util.CollectionUtils;

import java.io.*;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

/**
 * 1.随机生成 Salary {name, baseSalary, bonus  }的记录，如“wxxx,10,1”，每行一条记录，总共1000万记录，
 * 2.写入文本文件（UFT-8编码），
 * 3.然后读取文件，
 * 4.name的前两个字符相同的，其年薪累加，比如wx，100万，3个人，
 * 5.最后做排序和分组，输出年薪总额最高的10组：
 *                      wx, 200万，10人
 *                      lt, 180万，8人
 *
 * name 4位a-z随机，    
 * baseSalary [0,100]随机 bonus[0-5]随机 年薪总额 = baseSalary*13 + bonus
 * 请努力将程序优化到5秒内执行完
 *
 * Created by 沧澜 on 2018/11/13.
 */
public class pentest02 {
    public static void main(String[] args) {
        long start=System.currentTimeMillis();
        String url="d:\\test_file.txt";
        /*CollectionUtils.timeConsumingTest("inFile",e -> {
            inFile(url,10000000);
        });
        CollectionUtils.timeConsumingTest("readFileProcessingData",e -> {
            readFileProcessingData(url);
        });*/
        CollectionUtils.timeConsumingTest("randomlyGeneratedData",e -> {
            //randomlyGeneratedData(10000000);
            new pentest02().testTaskLocalRandom();
        });
        long end=System.currentTimeMillis();
        System.out.println(end-start);

    }

    /**
     * 读取文件并处理数据
     * @param url
     */
    public static void readFileProcessingData(String url){
        BufferedInputStream in =null;
        BufferedReader reader =null;
        List<Map<String,Object>> list=new ArrayList<>();
        try {
            File file = new File(url);
            in = new BufferedInputStream(new FileInputStream(file));
            reader = new BufferedReader(new InputStreamReader(in, "utf-8"),10 * 1024 * 1024);// 用5M的缓冲读取文本文件

            Map<String,Map<String,String>> groupby=new HashMap<>();
            BufferedReader finalReader = reader;
            CollectionUtils.timeConsumingTest("reader", e -> {
                String line = "";
                try {
                    while ((line = finalReader.readLine()) != null) {
                        String[] strs=line.split(",");
                        String nameTwo= strs[0].substring(0,2);
                        Integer baseSalary=Integer.valueOf(strs[1]);
                        Integer bonus=Integer.valueOf(strs[2]);
                        //年薪
                        Integer annual=baseSalary*13+bonus;
                        //组年薪
                        Map<String,String> groupInfo=groupby.get(nameTwo);
                        if(groupInfo==null){
                            groupInfo=new HashMap<>();
                            groupInfo.put("perAnnum", String.valueOf(annual));
                            groupInfo.put("num", String.valueOf(1));
                            groupInfo.put("nameTwo",nameTwo);

                        }else {
                            Integer perAnnum=Integer.valueOf(groupInfo.get("perAnnum"));
                            Integer num=Integer.valueOf(groupInfo.get("num"))+1;
                            perAnnum=perAnnum+annual;
                            groupInfo.put("perAnnum", String.valueOf(perAnnum));
                            groupInfo.put("num", String.valueOf(num));
                        }
                        groupby.put(nameTwo,groupInfo);
                    }
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            });
            /*while ((line = reader.readLine()) != null) {
                String[] strs=line.split(",");
                String nameTwo= strs[0].substring(0,2);
                Integer baseSalary=Integer.valueOf(strs[1]);
                Integer bonus=Integer.valueOf(strs[2]);
                //年薪
                Integer annual=baseSalary*13+bonus;
                //组年薪
                Map<String,String> groupInfo=groupby.get(nameTwo);
                if(groupInfo==null){
                    groupInfo=new HashMap<>();
                    groupInfo.put("perAnnum", String.valueOf(annual));
                    groupInfo.put("num", String.valueOf(1));
                    groupInfo.put("nameTwo",nameTwo);

                }else {
                   Integer perAnnum=Integer.valueOf(groupInfo.get("perAnnum"));
                   Integer num=Integer.valueOf(groupInfo.get("num"))+1;
                   perAnnum=perAnnum+annual;
                   groupInfo.put("perAnnum", String.valueOf(perAnnum));
                   groupInfo.put("num", String.valueOf(num));
                }
                groupby.put(nameTwo,groupInfo);
            }*/
            LinkedList<Map.Entry<String, Map<String,String>>> groupList = new LinkedList<>(groupby.entrySet());
            groupList.sort(new Comparator<Map.Entry<String, Map<String,String>>>(){
                @Override
                public int compare(Map.Entry<String, Map<String,String>> o1, Map.Entry<String, Map<String,String>> o2) {
                    return Integer.valueOf(o2.getValue().get("perAnnum")) -  Integer.valueOf(o1.getValue().get("perAnnum"));
                }
            });
            groupList.stream().limit(10).forEach(e->{
               String nameTwo= e.getValue().get("nameTwo");
                double perAnnum= Integer.valueOf(e.getValue().get("perAnnum"))/10000.0;
                String num= e.getValue().get("num");
                StringBuilder message = new StringBuilder();
                message.append(nameTwo).append(",").append(perAnnum).append("万,").append(num).append("人");
                System.out.println(message.toString());
            } );
        }catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();
                reader.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * 写入文件
     */
    public static void inFile(String url,int n){
        FileOutputStream out = null;
        BufferedOutputStream buff = null;
        BufferedWriter writer =null;
        final String[] data = {null};
        CollectionUtils.timeConsumingTest("randomlyGeneratedData",e->{
            data[0] = randomlyGeneratedData(n);
        });
       //String data= randomlyGeneratedData(n);
        try {
            File file = new File(url);
            file.delete();
            file.createNewFile();
            out = new FileOutputStream(file);
            writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
            writer.write(data[0]);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
    /**
     * 随机生成1000万条数数据
     * @return
     */
    public static String randomlyGeneratedData(int n){
        StringBuilder data = new StringBuilder();
       // int n=10000000;
        for(int i=0;i<n;i++){
            CollectionUtils.timeConsumingTest("data.append(getName()).append(\",\");",e -> {
                data.append(getName()).append(",");
            });
            CollectionUtils.timeConsumingTest("data.append(getRandomNum(100)).append(\",\");",e -> {
                data.append(getRandomNum(100)).append(",");
            });
            CollectionUtils.timeConsumingTest("data.append(getRandomNum(5)).append(\"\\n\");",e -> {
                data.append(getRandomNum(5)).append("\n");
            });
           /* data.append(getName()).append(",");
            data.append(getRandomNum(100)).append(",");
            data.append(getRandomNum(5)).append("\n");*/
        }
        return data.toString();
    }

    /**
     * 获取随机数
     * @param end
     * @return
     */
    public static int getRandomNum(int end){
          return (int)(Math.random()*end);
    }
    /**
     * 随机获取名称
     * @return
     */
    public static String getName(){
        StringBuilder name = new StringBuilder();
        for(int i=0;i<4;i++){
            name.append((char)(int)(Math.random()*26+97));
        }
        return name.toString();
    }



    public  void testTaskLocalRandom() {
        File file = new File("d:\\test_file.txt");
        file.delete();
        try {
            file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Thread[] threads = new Thread[1000];
        for (int i = 0; i < 100; i++) {
            TaskLocalRandom taskLocalRandom = new TaskLocalRandom();
            threads[i] = new Thread(taskLocalRandom);
            threads[i].start();
        }
    }
  public StringBuilder data =new StringBuilder();
   class TaskLocalRandom implements Runnable {

       public TaskLocalRandom() {
           // TODO Auto-generated constructor stub
           ThreadLocalRandom.current();
       }

       @Override
       public void run() {
           // TODO Auto-generated method stub
           String name = Thread.currentThread().getName();
           StringBuilder data1 =new StringBuilder();
           for (int i = 0; i < 100000; i++) {
               data1.append(getName()).append(",");
               data1.append(getRandomNum(100)).append(",");
               data1.append(getRandomNum(5)).append("\n");
           }
           FileOutputStream out = null;
           BufferedOutputStream buff = null;
           BufferedWriter writer =null;
           final String[] data = {null};
           //String data= randomlyGeneratedData(n);
           try {
               File file = new File("d:\\test_file.txt");
             /*  file.delete();
               file.createNewFile();*/
               out = new FileOutputStream(file);
               writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
               writer.write(data1.toString());
               writer.close();
           } catch (Exception e) {
               e.printStackTrace();
           } finally {
               try {
                   writer.close();
               }catch (Exception e) {
                   e.printStackTrace();
               }
           }
          // data.append(data1);
       }
   }
}
