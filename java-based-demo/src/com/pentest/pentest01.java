package com.pentest;

import com.zuql.util.CollectionUtils;

import java.io.*;
import java.lang.reflect.Array;
import java.nio.MappedByteBuffer;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Logger;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * 1.随机生成 Salary {name, baseSalary, bonus  }的记录，如“wxxx,10,1”，每行一条记录，总共1000万记录，
 * 2.写入文本文件（UFT-8编码），
 * 3.然后读取文件，
 * 4.name的前两个字符相同的，其年薪累加，比如wx，100万，3个人，
 * 5.最后做排序和分组，输出年薪总额最高的10组：
 *                      wx, 200万，10人
 *                      lt, 180万，8人
 *
 * name 4位a-z随机，    
 * baseSalary [0,100]随机 bonus[0-5]随机 年薪总额 = baseSalary*13 + bonus
 * 请努力将程序优化到5秒内执行完
 *
 * Created by 沧澜 on 2018/11/13.
 */
public class pentest01 {
    protected final static Logger log = Logger.getLogger(new Object() {
        public String getClassName() {
            String clazzName = this.getClass().getName();
            return clazzName.substring(0, clazzName.lastIndexOf('$'));
        }
    }.getClassName());
    public static void main(String[] args) {
        long start=System.currentTimeMillis();
        String url="e:\\test_file.txt";
        inFile(url,10000000);
        readFileProcessingData(url);

        long end=System.currentTimeMillis();
        System.out.println(end-start);

    }

    /**
     * 读取文件并处理数据
     * @param url
     */
    public static void readFileProcessingData(String url){
        BufferedInputStream in =null;
        BufferedReader reader =null;
        try {
            File file = new File(url);
            in = new BufferedInputStream(new FileInputStream(file));
            reader = new BufferedReader(new InputStreamReader(in, "utf-8"),50 * 1024 * 1024);// 用5M的缓冲读取文本文件

            ConcurrentHashMap<String,ConcurrentHashMap<String,String>> groupby=new ConcurrentHashMap<>(2000);
            final int[] n = {0};
            reader.lines().parallel().forEach(e->{
                    String nameTwo=e.substring(0,2);
                    int index=e.indexOf(",");
                    int lastIndexOf=e.lastIndexOf(",");
                    Integer baseSalary=Integer.valueOf(e.substring(index+1,lastIndexOf));
                    Integer bonus=Integer.valueOf(e.substring(lastIndexOf+1,e.length()));
                    Integer annual=baseSalary*13+bonus;
                    ConcurrentHashMap<String,String> groupInfo=groupby.get(nameTwo);
                    if(groupInfo==null){
                        groupInfo=new ConcurrentHashMap<>();
                        groupInfo.put("perAnnum", String.valueOf(annual));
                        groupInfo.put("num", String.valueOf(1));
                        groupInfo.put("nameTwo",nameTwo);

                    }else {
                        Integer perAnnum=Integer.valueOf(groupInfo.get("perAnnum"));
                        Integer num=Integer.valueOf(groupInfo.get("num"))+1;
                        perAnnum=perAnnum+annual;
                        groupInfo.put("perAnnum", String.valueOf(perAnnum));
                        groupInfo.put("num", String.valueOf(num));
                    }
                    groupby.put(nameTwo,groupInfo);
            });
            System.out.println(n[0]);
          /*while (reader.ready()) {
               //long start=System.currentTimeMillis();
                String line = reader.readLine();

                String nameTwo=line.substring(0,2);
                int index=line.indexOf(",");
                int lastIndexOf=line.lastIndexOf(",");
                Integer baseSalary=Integer.valueOf(line.substring(index+1,lastIndexOf));
                Integer bonus=Integer.valueOf(line.substring(lastIndexOf+1,line.length()));

                //年薪
                Integer annual=baseSalary*13+bonus;
                //组年薪
               ConcurrentHashMap<String,String> groupInfo=groupby.get(nameTwo);
                if(groupInfo==null){
                    groupInfo=new ConcurrentHashMap<>();
                    groupInfo.put("perAnnum", String.valueOf(annual));
                    groupInfo.put("num", String.valueOf(1));
                    groupInfo.put("nameTwo",nameTwo);

                }else {
                   Integer perAnnum=Integer.valueOf(groupInfo.get("perAnnum"));
                   Integer num=Integer.valueOf(groupInfo.get("num"))+1;
                   perAnnum=perAnnum+annual;
                   groupInfo.put("perAnnum", String.valueOf(perAnnum));
                   groupInfo.put("num", String.valueOf(num));
                }
                groupby.put(nameTwo,groupInfo);

            }*/
        LinkedList<Map.Entry<String, ConcurrentHashMap<String,String>>> groupList = new LinkedList<>(groupby.entrySet());
            groupList.sort(new Comparator<Map.Entry<String, ConcurrentHashMap<String,String>>>(){
                @Override
                public int compare(Map.Entry<String, ConcurrentHashMap<String,String>> o1, Map.Entry<String, ConcurrentHashMap<String,String>> o2) {
                    return Integer.valueOf(o2.getValue().get("perAnnum")) -  Integer.valueOf(o1.getValue().get("perAnnum"));
                }
            });
            long start1=System.currentTimeMillis();
            groupList.stream().limit(10).forEach(e->{
               String nameTwo= e.getValue().get("nameTwo");
                double perAnnum= Integer.valueOf(e.getValue().get("perAnnum"))/10000.0;
                String num= e.getValue().get("num");
                StringBuilder message = new StringBuilder();
                message.append(nameTwo).append(",").append(perAnnum).append("万,").append(num).append("人");
                System.out.println(message.toString());
            } );
        }catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();
                reader.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * 写入文件
     */
    public static void inFile(String url,int n){
        FileOutputStream out = null;
        BufferedOutputStream buff = null;
        BufferedWriter writer =null;
        final String[] data = {null};
        try {
            File file = new File(url);
            file.delete();
            file.createNewFile();
            out = new FileOutputStream(file);
            writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
            for(int i=0;i<n;i++){
                writer.write(getStr());
            }
            //writer.write(data[0]);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
    public static String getStr(){
        StringBuilder data = new StringBuilder();
        data.append(getName()).append(",");
        data.append((int)(Math.random()*100)).append(",");
        data.append(getRandomNum(5)).append("\n");
        return data.toString();
    }
    /**
     * 获取随机数
     * @param end
     * @return
     */
    public static int getRandomNum(int end){
          return (int)(Math.random()*end);
    }
    /**
     * 随机获取名称
     * @return
     */
    public static String getName(){
        StringBuilder name = new StringBuilder();
        for(int i=0;i<4;i++){
            name.append((char)(int)(Math.random()*26+97));
        }
        return name.toString();
    }

}
