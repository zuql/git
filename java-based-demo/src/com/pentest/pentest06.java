package com.pentest;

import java.io.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

/**
 * 1.随机生成 Salary {name, baseSalary, bonus  }的记录，如“wxxx,10,1”，每行一条记录，总共1000万记录，
 * 2.写入文本文件（UFT-8编码），
 * 3.然后读取文件，
 * 4.name的前两个字符相同的，其年薪累加，比如wx，100万，3个人，
 * 5.最后做排序和分组，输出年薪总额最高的10组：
 *                      wx, 200万，10人
 *                      lt, 180万，8人
 *
 * name 4位a-z随机，    
 * baseSalary [0,100]随机 bonus[0-5]随机 年薪总额 = baseSalary*13 + bonus
 * 请努力将程序优化到5秒内执行完
 *
 * Created by 沧澜 on 2018/11/13.
 */
public class pentest06 {
    public static void main(String[] args) {
        long start=System.currentTimeMillis();
        String fileName="file_name.txt";
        String path="e:\\test";
        int a=8;
        int b=1250000;
       /* int a=5;
        int b=2000000;*/
        exeFunction(path,fileName,a,b);
        long end=System.currentTimeMillis();
        System.out.println(end-start);

    }

    /**
     * 执行方法
     */
    public static void exeFunction(String path,String fileName,int a,int b){
        List<Thread> threads=new ArrayList<>();
        List<ReadRunable> inRunables=new ArrayList<>();
        for(int i=0;i<a;++i){
            String url=path+"\\"+i+fileName;
            File file = new File(url);
            write(file,b);
            ReadRunable inRunable=new ReadRunable();
            inRunable.setFile(file);
            Thread thread=new Thread(inRunable);
            threads.add(thread);
            inRunables.add(inRunable);
            thread.start();
        }
        for(Thread thread:threads){
            try {
                thread.join();
            }catch (Exception e){
                e.printStackTrace();
            }

        }
         sort(inRunables);
    }

    /**
     * 排序
     * @param inRunables
     */
    private static void  sort(List<ReadRunable> inRunables){
        HashMap<String, HashMap<String, String>> groupby= new HashMap<>();
        for(ReadRunable inRunable:inRunables){
            HashMap<String, HashMap<String, String>> rGroupby=  inRunable.getGroupby();
            rGroupby.forEach((k,v)->{
                HashMap<String, String> g= groupby.get(k);
                if(g==null){
                    groupby.put(k,v);
                }else {
                    Integer g_perAnnum=Integer.valueOf(g.get("perAnnum"));
                    Integer g_num=Integer.valueOf(g.get("num"));
                    Integer v_perAnnum=Integer.valueOf(v.get("perAnnum"));
                    Integer v_num=Integer.valueOf(v.get("num"));
                    g.put("perAnnum",(g_perAnnum+v_perAnnum)+"");
                    g.put("num",(g_num+v_num)+"");
                }
            });
        }
        LinkedList<HashMap.Entry<String, HashMap<String,String>>> groupList = new LinkedList<>(groupby.entrySet());
        groupList.sort(new Comparator<HashMap.Entry<String, HashMap<String,String>>>(){
            @Override
            public int compare(HashMap.Entry<String, HashMap<String,String>> o1, HashMap.Entry<String, HashMap<String,String>> o2) {
                return Integer.valueOf(o2.getValue().get("perAnnum")) -  Integer.valueOf(o1.getValue().get("perAnnum"));
            }
        });

        groupList.stream().limit(10).forEach(e->{
            String nameTwo= e.getValue().get("nameTwo");
            double perAnnum= Integer.valueOf(e.getValue().get("perAnnum"))/10000.0;
            String num= e.getValue().get("num");
            StringBuilder message = new StringBuilder();
            message.append(nameTwo).append(",").append(perAnnum).append("万,").append(num).append("人");
            System.out.println(message.toString());
        } );

    }

    /**
     * 写
     * @param file
     * @param b
     */
    public static void  write(File file,int b){
        FileOutputStream out = null;
        BufferedWriter writer =null;
        try {
            out = new FileOutputStream(file);
            writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
            for(int n=0;n<b;n++){
                writer.write(getStr());
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            try {
                writer.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 获取一条数据
     * @return
     */
    public static String getStr(){
        StringBuilder data = new StringBuilder();
        data.append(getName()).append(",");
        data.append((int)(Math.random()*100)).append(",");
        data.append(getRandomNum(5)).append("\n");
        return data.toString();
    }
    /**
     * 获取随机数
     * @param end
     * @return
     */
    public static int getRandomNum(int end){
        return (int)(Math.random()*end);
    }
    /**
     * 随机获取名称
     * @return
     */
    public static String getName(){
        StringBuilder name = new StringBuilder();
        for(int i=0;i<4;i++){
            name.append((char)(int)(Math.random()*26+97));
        }
        return name.toString();
    }
}

/**
 * 读
 */
class ReadRunable implements Runnable{
        private HashMap<String,HashMap<String,String>> groupby=new HashMap<>(2000);
        private File file;
        @Override
        public void run() {
            BufferedInputStream in =null;
            BufferedReader reader =null;
            try {
                in = new BufferedInputStream(new FileInputStream(file));
                reader = new BufferedReader(new InputStreamReader(in, "utf-8"),50 * 1024 * 1024);// 用5M的缓冲读取文本文件

                while (reader.ready()) {
                    String line = reader.readLine();
                    String[] strs=line.split(",");
                    String nameTwo= strs[0].substring(0,2);
                    Integer baseSalary=Integer.valueOf(strs[1]);
                    Integer bonus=Integer.valueOf(strs[2]);
                    Integer annual=baseSalary*13+bonus;
                    HashMap<String,String> groupInfo= groupby.get(nameTwo);
                    if(groupInfo==null){
                        groupInfo=new HashMap<>();
                        groupInfo.put("perAnnum", String.valueOf(annual));
                        groupInfo.put("num", String.valueOf(1));
                        groupInfo.put("nameTwo",nameTwo);

                    }else {
                        Integer perAnnum=Integer.valueOf(groupInfo.get("perAnnum"));
                        Integer num=Integer.valueOf(groupInfo.get("num"))+1;
                        perAnnum=perAnnum+annual;
                        groupInfo.put("perAnnum", String.valueOf(perAnnum));
                        groupInfo.put("num", String.valueOf(num));
                    }
                    groupby.put(nameTwo,groupInfo);
                }
            }catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    in.close();
                    reader.close();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        public HashMap<String, HashMap<String, String>> getGroupby() {
            return groupby;
        }

        public void setGroupby(HashMap<String, HashMap<String, String>> groupby) {
            this.groupby = groupby;
        }

        public File getFile() {
            return file;
        }

        public void setFile(File file) {
            this.file = file;
        }
    }
