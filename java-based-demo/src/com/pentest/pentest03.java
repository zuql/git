package com.pentest;

import com.zuql.util.CollectionUtils;

import java.io.*;
import java.util.*;

/**
 * 1.随机生成 Salary {name, baseSalary, bonus  }的记录，如“wxxx,10,1”，每行一条记录，总共1000万记录，
 * 2.写入文本文件（UFT-8编码），
 * 3.然后读取文件，
 * 4.name的前两个字符相同的，其年薪累加，比如wx，100万，3个人，
 * 5.最后做排序和分组，输出年薪总额最高的10组：
 *                      wx, 200万，10人
 *                      lt, 180万，8人
 *
 * name 4位a-z随机，    
 * baseSalary [0,100]随机 bonus[0-5]随机 年薪总额 = baseSalary*13 + bonus
 * 请努力将程序优化到5秒内执行完
 *
 * Created by 沧澜 on 2018/11/13.
 */
public class pentest03 {
    public static void main(String[] args) {
        long start=System.currentTimeMillis();
        FileOutputStream out = null;
        BufferedWriter writer =null;
        //生成文件
        String url="e:\\test_file.txt";
        File file = new File(url);
        file.delete();
        try {
            file.createNewFile();
            out = new FileOutputStream(file,true);
            writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
            Runnable1 runnable1=new Runnable1();
            runnable1.setWriter(writer);
            runnable1.setNum(5000000);
            List<Thread> threads=new ArrayList<>();
            for(int i=0;i<2;++i){
                Thread thread=new Thread(runnable1);
                thread.start();
                threads.add(thread);
            }
            for(Thread thread:threads){
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }

        long end=System.currentTimeMillis();
        System.out.println(end-start);

    }



}

class Runnable1 implements Runnable{
    private String url;
    private File file;
    private  Integer num;
    private BufferedWriter writer;
    @Override
    public void run() {
        CollectionUtils.timeConsumingTest("Runnable1", e1 -> {
            for(int i=0;i<num;i++){
                try {
                    writer.write(getStr());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
           /* for(int i=0;i<num;i++){
                try {
                    writer.write(getStr());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }*/


    }
    public static String getStr(){
        StringBuilder data = new StringBuilder();
        CollectionUtils.timeConsumingTest("getStr", e1 -> {
            data.append(getName()).append(",");
            data.append((int)(Math.random()*100)).append(",");
            data.append(getRandomNum(5)).append("\n");
        });
        return data.toString();
    }
    /**
     * 获取随机数
     * @param end
     * @return
     */
    public static int getRandomNum(int end){
        return (int)(Math.random()*end);
    }
    /**
     * 随机获取名称
     * @return
     */
    public static String getName(){
        StringBuilder name = new StringBuilder();
        for(int i=0;i<4;i++){
            name.append((char)(int)(Math.random()*26+97));
        }
        return name.toString();
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Integer getNum() {
        return num;
    }

    public void setNum(Integer num) {
        this.num = num;
    }

    public BufferedWriter getWriter() {
        return writer;
    }

    public void setWriter(BufferedWriter writer) {
        this.writer = writer;
    }
}