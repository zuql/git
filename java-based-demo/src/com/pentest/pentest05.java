package com.pentest;

import com.zuql.util.CollectionUtils;

import java.io.*;
import java.nio.IntBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.*;

/**
 * 1.随机生成 Salary {name, baseSalary, bonus  }的记录，如“wxxx,10,1”，每行一条记录，总共1000万记录，
 * 2.写入文本文件（UFT-8编码），
 * 3.然后读取文件，
 * 4.name的前两个字符相同的，其年薪累加，比如wx，100万，3个人，
 * 5.最后做排序和分组，输出年薪总额最高的10组：
 *                      wx, 200万，10人
 *                      lt, 180万，8人
 *
 * name 4位a-z随机，    
 * baseSalary [0,100]随机 bonus[0-5]随机 年薪总额 = baseSalary*13 + bonus
 * 请努力将程序优化到5秒内执行完
 *
 * Created by 沧澜 on 2018/11/13.
 */
public class pentest05 {
    public static void main(String[] args) {
        long start=System.currentTimeMillis();
        String url="e:\\test_file.txt";
       // inFile(url,10000000);
        readFileProcessingData(url);

        long end=System.currentTimeMillis();
        System.out.println(end-start);

    }

    /**
     * 读取文件并处理数据
     * @param url
     */
    public static void readFileProcessingData(String url){
        //512m
        long length = 1L << 29;
        //4g
        long _4G = 1L << 32;
        long cur = 0L;
        try {
            MappedByteBuffer mappedByteBuffer;
            Random random = new Random();
            while (cur < _4G) {
                mappedByteBuffer = new RandomAccessFile(url, "rw").getChannel()
                        .map(FileChannel.MapMode.READ_WRITE, cur, length);
                IntBuffer intBuffer = mappedByteBuffer.asIntBuffer();
                while (intBuffer.position() < intBuffer.capacity()) {
                    intBuffer.put(random.nextInt());
                }
                cur += length;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    /**
     * 写入文件
     */
    public static void inFile(String url,int n){
        FileOutputStream out = null;
        BufferedOutputStream buff = null;
        BufferedWriter writer =null;
        final String[] data = {null};
        try {
            File file = new File(url);
            file.delete();
            file.createNewFile();
            out = new FileOutputStream(file);
            writer = new BufferedWriter(new OutputStreamWriter(out, "UTF-8"));
            for(int i=0;i<n;i++){
                writer.write(getStr());
            }
            //writer.write(data[0]);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
    public static String getStr(){
        StringBuilder data = new StringBuilder();
        data.append(getName()).append(",");
        data.append((int)(Math.random()*100)).append(",");
        data.append(getRandomNum(5)).append("\n");
        return data.toString();
    }
    /**
     * 获取随机数
     * @param end
     * @return
     */
    public static int getRandomNum(int end){
          return (int)(Math.random()*end);
    }
    /**
     * 随机获取名称
     * @return
     */
    public static String getName(){
        StringBuilder name = new StringBuilder();
        for(int i=0;i<4;i++){
            name.append((char)(int)(Math.random()*26+97));
        }
        return name.toString();
    }

}
